// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/confluentinc/confluent-kafka-go/v2/kafka"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWrappedConsumer creates a new instance of MockWrappedConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWrappedConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWrappedConsumer {
	mock := &MockWrappedConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWrappedConsumer is an autogenerated mock type for the WrappedConsumer type
type MockWrappedConsumer struct {
	mock.Mock
}

type MockWrappedConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWrappedConsumer) EXPECT() *MockWrappedConsumer_Expecter {
	return &MockWrappedConsumer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockWrappedConsumer
func (_mock *MockWrappedConsumer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWrappedConsumer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockWrappedConsumer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockWrappedConsumer_Expecter) Close() *MockWrappedConsumer_Close_Call {
	return &MockWrappedConsumer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockWrappedConsumer_Close_Call) Run(run func()) *MockWrappedConsumer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWrappedConsumer_Close_Call) Return(err error) *MockWrappedConsumer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWrappedConsumer_Close_Call) RunAndReturn(run func() error) *MockWrappedConsumer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function for the type MockWrappedConsumer
func (_mock *MockWrappedConsumer) Poll(timeoutMs int) kafka.Event {
	ret := _mock.Called(timeoutMs)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 kafka.Event
	if returnFunc, ok := ret.Get(0).(func(int) kafka.Event); ok {
		r0 = returnFunc(timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Event)
		}
	}
	return r0
}

// MockWrappedConsumer_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type MockWrappedConsumer_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - timeoutMs int
func (_e *MockWrappedConsumer_Expecter) Poll(timeoutMs interface{}) *MockWrappedConsumer_Poll_Call {
	return &MockWrappedConsumer_Poll_Call{Call: _e.mock.On("Poll", timeoutMs)}
}

func (_c *MockWrappedConsumer_Poll_Call) Run(run func(timeoutMs int)) *MockWrappedConsumer_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWrappedConsumer_Poll_Call) Return(event kafka.Event) *MockWrappedConsumer_Poll_Call {
	_c.Call.Return(event)
	return _c
}

func (_c *MockWrappedConsumer_Poll_Call) RunAndReturn(run func(timeoutMs int) kafka.Event) *MockWrappedConsumer_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeTopics provides a mock function for the type MockWrappedConsumer
func (_mock *MockWrappedConsumer) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	ret := _mock.Called(topics, rebalanceCb)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeTopics")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string, kafka.RebalanceCb) error); ok {
		r0 = returnFunc(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWrappedConsumer_SubscribeTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeTopics'
type MockWrappedConsumer_SubscribeTopics_Call struct {
	*mock.Call
}

// SubscribeTopics is a helper method to define mock.On call
//   - topics []string
//   - rebalanceCb kafka.RebalanceCb
func (_e *MockWrappedConsumer_Expecter) SubscribeTopics(topics interface{}, rebalanceCb interface{}) *MockWrappedConsumer_SubscribeTopics_Call {
	return &MockWrappedConsumer_SubscribeTopics_Call{Call: _e.mock.On("SubscribeTopics", topics, rebalanceCb)}
}

func (_c *MockWrappedConsumer_SubscribeTopics_Call) Run(run func(topics []string, rebalanceCb kafka.RebalanceCb)) *MockWrappedConsumer_SubscribeTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		var arg1 kafka.RebalanceCb
		if args[1] != nil {
			arg1 = args[1].(kafka.RebalanceCb)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWrappedConsumer_SubscribeTopics_Call) Return(err error) *MockWrappedConsumer_SubscribeTopics_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWrappedConsumer_SubscribeTopics_Call) RunAndReturn(run func(topics []string, rebalanceCb kafka.RebalanceCb) error) *MockWrappedConsumer_SubscribeTopics_Call {
	_c.Call.Return(run)
	return _c
}
